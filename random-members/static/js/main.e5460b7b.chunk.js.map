{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","wrapper","height","display","flexFlow","menuButton","marginRight","spacing","title","flexGrow","main","margin","a11yProps","index","id","TabPanel","props","children","value","other","Typography","component","role","hidden","aria-labelledby","Box","p","splitMemberList","members","hashMap","split","filter","s","trim","push","Boolean","window","location","hostname","match","ReactDOM","render","classes","React","useState","selectedTab","setSelectedTab","useLocalStorage","storedMemberList","setStoredMemberList","memberList","setMemberList","resultList","setResultList","generateCount","setGenerateCount","safeSetGenerateCount","Number","length","handleGenerateCountInputChange","event","target","className","AppBar","position","CssBaseline","Toolbar","IconButton","edge","color","aria-label","variant","Button","onClick","sampledMembers","arr","size","temp","shuffled","slice","i","min","Math","floor","random","getRandomSubarray","join","Tabs","onChange","newValue","Tab","label","noValidate","autoComplete","FormControl","fullWidth","InputLabel","htmlFor","Input","inputProps","step","max","type","style","marginTop","TextField","multiline","defaultValue","readOnly","InputProps","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5460b7b.chunk.js","sourcesContent":["import React from 'react';\nimport useLocalStorage from 'react-use-localstorage';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nimport 'fonts.css/dist/fonts.css';\nimport 'roboto-fontface';\nimport '@material-ui/icons';\nimport './App.css';\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    height: '100%',\n    display: 'flex',\n    flexFlow: 'column',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  main: {\n    height: 'auto',\n    margin: 0,\n    flexGrow: 1,\n  }\n}));\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\n\nfunction splitMemberList(value) {\n  const members = [];\n  const hashMap = {};\n  for (const s of value.split('\\n').filter(s => s.trim() !== '')) {\n    if (!hashMap[s]) {\n      hashMap[s] = 1;\n      members.push(s);\n    }\n  }\n  return members;\n}\n\nexport default function App() {\n  const classes = useStyles();\n  // selected tab\n  const [selectedTab, setSelectedTab] = React.useState(0);\n  // member list\n  const [storedMemberList, setStoredMemberList] = useLocalStorage('memberList', '');\n  const [memberList, setMemberList] = React.useState(splitMemberList(storedMemberList));\n  // result list\n  const [resultList, setResultList] = useLocalStorage('resultList', '');\n  // generate random count\n  const [generateCount, setGenerateCount] = useLocalStorage('generateCount', '0');\n\n  function safeSetGenerateCount(value) {\n    value = Number(value);\n    if (value < 0) {\n      setGenerateCount(0);\n    } else if (value > memberList.length) {\n      setGenerateCount(memberList.length);\n    }\n  }\n\n  function getRandomSubarray(arr, size) {\n    var shuffled = arr.slice(0), i = arr.length, min = i - size, temp, index;\n    while (i-- > min) {\n        index = Math.floor((i + 1) * Math.random());\n        temp = shuffled[index];\n        shuffled[index] = shuffled[i];\n        shuffled[i] = temp;\n    }\n    return shuffled.slice(min);\n  }\n\n  const handleTabChange = (event, newValue) => {\n    setSelectedTab(newValue);\n  };\n  const handleMemberListChange = (event) => {\n    const members = splitMemberList(event.target.value);\n    setMemberList(members);\n    setStoredMemberList(members.join('\\n'));\n    safeSetGenerateCount(generateCount);\n  };\n\n  const handleGenerateCountInputChange = event => {\n    setGenerateCount(event.target.value === '' ? '0' : Number(event.target.value));\n  };\n\n  const handleGenerate = (event) => {\n    safeSetGenerateCount(generateCount);\n    const sampledMembers = getRandomSubarray(memberList, Number(generateCount));\n    setResultList(sampledMembers.join('\\n'));\n    setSelectedTab(1);\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <AppBar position=\"static\">\n        <CssBaseline />\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            随机名单生成器\n          </Typography>\n          <Button color=\"inherit\" onClick={handleGenerate}>生成随机名单</Button>\n        </Toolbar>\n        <Tabs value={selectedTab} onChange={handleTabChange} aria-label=\"simple tabs example\">\n          <Tab label=\"输入名单\" {...a11yProps(0)} />\n          <Tab label=\"随机结果\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <div className={classes.main}>\n        <TabPanel value={selectedTab} index={0}>\n          <form noValidate autoComplete=\"off\">\n            <div>\n              <FormControl fullWidth>\n                <InputLabel htmlFor=\"generate-count-input\">随机名单长度</InputLabel>\n                <Input\n                  id=\"generate-count-input\"\n                  value={Number(generateCount)}\n                  label='随机名单长度'\n                  onChange={handleGenerateCountInputChange}\n                  variant='outlined'\n                  fullWidth\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: memberList.length,\n                    type: 'number',\n                  }}\n                />\n              </FormControl>\n            </div>\n            <div style={{marginTop: '20px'}}>\n              <FormControl fullWidth>\n                <TextField\n                  id=\"memberList\"\n                  label={`请输入名单（现有 ${memberList.length} 项）`}\n                  multiline\n                  fullWidth\n                  variant=\"outlined\"\n                  defaultValue={memberList.join('\\n')}\n                  onChange={handleMemberListChange} \n                />\n              </FormControl>\n            </div>\n          </form>\n        </TabPanel>\n        <TabPanel value={selectedTab} index={1}>\n          <form noValidate autoComplete=\"off\">\n            <div>\n              <FormControl fullWidth>\n                <InputLabel htmlFor=\"generate-count-input\">随机名单长度</InputLabel>\n                <Input\n                  id=\"generate-count-input\"\n                  value={Number(generateCount)}\n                  label='随机名单长度'\n                  onChange={handleGenerateCountInputChange}\n                  variant='outlined'\n                  fullWidth\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: memberList.length,\n                    type: 'number',\n                  }}\n                />\n              </FormControl>\n            </div>\n            <div style={{marginTop: '20px'}}>\n              <TextField\n                id=\"resultList\"\n                label=\"随机结果\"\n                multiline\n                fullWidth\n                readOnly\n                variant=\"outlined\"\n                value={resultList}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </div>\n          </form>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}