{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","wrapper","height","display","flexFlow","menuButton","marginRight","spacing","title","flexGrow","main","margin","a11yProps","index","id","TabPanel","props","children","value","other","Typography","component","role","hidden","aria-labelledby","Box","p","splitMemberList","members","hashMap","split","filter","s","trim","push","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","classes","useLocalStorage","storedSelectedTab","setStoredSelectedTab","React","useState","Number","selectedTab","setSelectedTab","storedMemberList","setStoredMemberList","memberList","setMemberList","resultList","setResultList","storedGenerateCount","setStoredGenerateCount","generateCount","setGenerateCount","safeSetGenerateCount","length","handleGenerateCountChange","event","newValue","className","AppBar","position","CssBaseline","Toolbar","IconButton","edge","color","aria-label","variant","Button","onClick","sampledMembers","arr","size","temp","shuffled","slice","i","min","Math","floor","random","getRandomSubarray","join","Tabs","onChange","Tab","label","noValidate","autoComplete","onSubmit","e","preventDefault","Grid","container","item","xs","gutterBottom","Slider","valueLabelDisplay","step","max","TextField","multiline","fullWidth","defaultValue","target","readOnly","InputProps","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa745b9b.chunk.js","sourcesContent":["import React from 'react';\nimport useLocalStorage from 'react-use-localstorage';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nimport 'fonts.css/dist/fonts.css';\nimport 'roboto-fontface';\nimport '@material-ui/icons';\nimport './App.css';\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    height: '100%',\n    display: 'flex',\n    flexFlow: 'column',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  main: {\n    height: 'auto',\n    margin: 0,\n    flexGrow: 1,\n  }\n}));\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\n\nfunction splitMemberList(value) {\n  const members = [];\n  const hashMap = {};\n  for (const s of value.split('\\n').filter(s => s.trim() !== '')) {\n    if (!hashMap[s]) {\n      hashMap[s] = 1;\n      members.push(s);\n    }\n  }\n  return members;\n}\n\nexport default function App() {\n  const classes = useStyles();\n  // selected tab\n  const [storedSelectedTab, setStoredSelectedTab] = useLocalStorage('selectedTab', '');\n  const [selectedTab, setSelectedTab] = React.useState(Number(storedSelectedTab));\n  // member list\n  const [storedMemberList, setStoredMemberList] = useLocalStorage('memberList', '');\n  const [memberList, setMemberList] = React.useState(splitMemberList(storedMemberList));\n  // result list\n  const [resultList, setResultList] = useLocalStorage('resultList', '');\n  // generate random count\n  const [storedGenerateCount, setStoredGenerateCount] = useLocalStorage('generateCount', '0');\n  const [generateCount, setGenerateCount] = React.useState(Number(storedGenerateCount));\n\n  function safeSetGenerateCount(value) {\n    value = value < 0 ? 0 : (value > memberList.length ? memberList.length : value);\n    setGenerateCount(value);\n    setStoredGenerateCount(value);\n  }\n\n  function getRandomSubarray(arr, size) {\n    var shuffled = arr.slice(0), i = arr.length, min = i - size, temp, index;\n    while (i-- > min) {\n        index = Math.floor((i + 1) * Math.random());\n        temp = shuffled[index];\n        shuffled[index] = shuffled[i];\n        shuffled[i] = temp;\n    }\n    return shuffled.slice(min);\n  }\n\n  const handleTabChange = (event, newValue) => {\n    setSelectedTab(newValue);\n    setStoredSelectedTab(newValue);\n  };\n  const handleMemberListChange = (event) => {\n    const members = splitMemberList(event.target.value);\n    setMemberList(members);\n    setStoredMemberList(members.join('\\n'));\n    safeSetGenerateCount(generateCount);\n  };\n\n  const handleGenerateCountChange = (event, newValue) => {\n    safeSetGenerateCount(newValue);\n  };\n\n  const handleGenerate = (event) => {\n    safeSetGenerateCount(generateCount);\n    const sampledMembers = getRandomSubarray(memberList, generateCount);\n    setResultList(sampledMembers.join('\\n'));\n    setSelectedTab(1);\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <AppBar position=\"static\">\n        <CssBaseline />\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            随机名单生成器\n          </Typography>\n          <Button color=\"inherit\" onClick={handleGenerate}>生成随机名单</Button>\n        </Toolbar>\n        <Tabs value={selectedTab} onChange={handleTabChange} aria-label=\"simple tabs example\">\n          <Tab label=\"输入名单\" {...a11yProps(0)} />\n          <Tab label=\"随机结果\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <div className={classes.main}>\n        <TabPanel value={selectedTab} index={0}>\n          <form noValidate autoComplete=\"off\" onSubmit={(e) => e.preventDefault()}>\n            <Grid container spacing={3}>\n              <Grid container item xs={12} spacing={3}>\n                <Typography id=\"generate-count-input\" gutterBottom>随机名单长度：{generateCount}</Typography>\n                <Slider \n                  value={generateCount}\n                  //defaultValue={generateCount}\n                  onChange={handleGenerateCountChange}\n                  aria-labelledby=\"generate-count-input\"\n                  valueLabelDisplay=\"auto\"\n                  step={1}\n                  min={0}\n                  max={memberList.length}\n                />\n              </Grid>\n              <Grid container item xs={12} spacing={3}>\n                <Typography id=\"member-list-input\" gutterBottom>\n                  请输入名单（现有 {memberList.length} 项）\n                </Typography>\n                <TextField\n                  id=\"memberList\"\n                  aria-labelledby=\"member-list-input\"\n                  multiline\n                  fullWidth\n                  variant=\"outlined\"\n                  defaultValue={memberList.join('\\n')}\n                  onChange={handleMemberListChange} \n                />\n              </Grid>\n            </Grid>\n          </form>\n        </TabPanel>\n        <TabPanel value={selectedTab} index={1}>\n          <form noValidate autoComplete=\"off\" onSubmit={(e) => e.preventDefault()}>\n            <Grid container spacing={3}>\n              <Grid container item xs={12} spacing={3}>\n                <Typography id=\"generate-count-input\" gutterBottom>随机名单长度：{generateCount}</Typography>\n                <Slider \n                  value={generateCount}\n                  onChange={handleGenerateCountChange}\n                  aria-labelledby=\"generate-count-input\"\n                  valueLabelDisplay=\"auto\"\n                  step={1}\n                  min={0}\n                  max={memberList.length}\n                />\n              </Grid>\n              <Grid container item xs={12} spacing={3}>\n                <Typography id=\"result-list-input\" gutterBottom>随机结果</Typography>\n                <TextField\n                  id=\"resultList\"\n                  aria-labelledby=\"result-list-input\"\n                  multiline\n                  fullWidth\n                  readOnly\n                  variant=\"outlined\"\n                  value={resultList}\n                  InputProps={{\n                    readOnly: true,\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </form>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}